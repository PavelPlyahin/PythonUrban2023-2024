# Библиотека "requests" предназначена для отправки HTTP-запросов в Python. Она упрощает процесс взаимодействия
# с RESTful API и позволяет легко получать доступ к различным веб-сервисам. С помощью requests вы можете выполнять
# различные операции, такие как GET и POST запросы, загрузка файлов, базовая и продвинутая обработка HTTP-авторизации
# и многое другое. Библиотека также поддерживает прокси, потоки, обработку ошибок и прочие полезные функции. В целом,
# requests является одной из основных и широко используемых библиотек для работы с HTTP в Python.

'''Задача: Написать скрипт на Python, используя библиотеку requests, который отправляет GET-запрос на сервер и
выводит ответ в консоли.'''
# Решение:

import requests

url = 'https://example.com'
response = requests.get(url)

print(response.text)



# Библиотека "pandas" является одной из самых популярных и широко используемых библиотек в экосистеме Python.
# Она предоставляет мощный и гибкий инструмент для работы с данными, в основном для обработки и анализа данных.
# Вот некоторые из наиболее важных функций библиотеки pandas:
# Обработка и анализ данных: pandas предоставляет множество функций для обработки и анализа данных, таких как чтение и
# запись данных в различных форматах, манипулирование данными с использованием индексов и колонок, группировка и
# агрегирование данных и т.д.
# Временные ряды: pandas предлагает богатый набор инструментов для работы с временными рядами, включая поддержку
# различных частот и единиц измерения времени, а также возможности для анализа и прогнозирования временных рядов.
# Работа с JSON и SQL: pandas поддерживает чтение и запись JSON-форматов, а также может взаимодействовать с различными
# SQL-базами данных через SQLAlchemy.
# Визуализация данных: pandas включает в себя набор функций для создания визуализаций данных, таких как гистограммы,
# графики, столбчатые диаграммы и т. д.
# Разделение данных на обучающую и тестовую выборки: pandas позволяет разделить данные на обучающую (training) и
# тестовую (testing) выборки для задач машинного обучения и статистического анализа.

# '''Задача: Подготовить и визуализировать sales_data датасет в pandas.'''
#
import pandas as pd
import numpy as np

sales_data = pd.DataFrame({'Region': ['North', 'North', 'South', 'West', 'East', 'South'],
                           'Sales': [10, 20, 30, 40, 50, 60],
                        'Expenses': [4, 9, 6, 1, 2, 5],
                          'Profit': [5, 11, 24, 39, 48, 55]})

print(sales_data)

sales_data.plot(kind='bar', x='Region', y='Sales')
sales_data.plot(kind='scatter', x='Sales', y='Profit')
sales_data.boxplot(column=['Sales', 'Expenses', 'Profit'])


# Библиотека "numpy" — это библиотека для работы с массивами и выполнения научных вычислений на языке Python.
# Она расширяет возможности языка, добавляя поддержку больших многомерных массивов и большое количество матричных и
# векторных операций. Также numpy предоставляет инструменты для работы с комплексными числами, целыми числами и более
# сложными структурами данных.

'''Задача:
Создать массив размерностью 4x4, заполнить его случайными числами от 0 до 1 и транспонировать его, используя numpy.
Решение:'''

import numpy as np

a = np.random.rand(4, 4)
b = a.T

print(a)
print(b)

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
b = a.sum()
print(b)
# Вывод на консоль:
# [[0.82333697 0.30920347 0.69384924 0.20312025]
#  [0.21067876 0.0514014  0.42202245 0.01628029]
#  [0.67609803 0.25295694 0.35237952 0.23183762]
#  [0.7351067  0.9393901  0.12024158 0.1363767 ]]
# [[0.82333697 0.21067876 0.67609803 0.7351067 ]
#  [0.30920347 0.0514014  0.25295694 0.9393901 ]
#  [0.69384924 0.42202245 0.35237952 0.12024158]
#  [0.20312025 0.01628029 0.23183762 0.1363767 ]]
# 45




# Библиотека "matplotlib" предназначена для визуализации данных с использованием двумерной и трехмерной графики.
# Она позволяет создавать различные типы графиков, такие как гистограммы, линейные графики, круговые диаграммы,
# карты и многое другое. Кроме того, matplotlib поддерживает различные форматы изображений и может работать с
# большими наборами данных.
'''Задача: Построить график функции sin(x) на отрезке [-10π, 10π] с шагом 0.1, используя matplotlib.
Решение:'''

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-10 * np.pi, 10 * np.pi, 0.1)
y = np.sin(x)

plt.plot(x, y)
plt.show()



# Библиотека "pillow" (ранее известная как Python Imaging Library) предоставляет инструменты для работы с изображениями
# в Python. Он поддерживает большое количество форматов изображений, включая JPEG, PNG, GIF, TIFF и другие. С помощью
# pillow вы можете изменять, масштабировать, вращать, преобразовывать изображения и многое другое.

from PIL import Image, ImageDraw, ImageFont

# Путь к изображению и шрифт для текста
background_image = 'background.jpg'
font = 'arial.ttf'

# Размеры изображения и текста
width, height = 1080, 720
text = 'PIL Image Library'

# Загрузка фонового изображения и шрифта
background = Image.open(background_image).resize((width, height))
draw = ImageDraw.Draw(background)
font = ImageFont.truetype(font, 70)

# Вывод текста на изображении
coord = (0, height - text.size(font) + 10)
draw.text(coord, text, fill=('white'), font=font)

background.save('result.jpg')